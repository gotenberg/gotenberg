name: ci
on:
  workflow_dispatch: {}
  push:
    branches:
      - main-bc
    tags:
      - v*
  pull_request:
    branches:
      - main-bc
  schedule:
    - cron: '0 0 * * 0'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  build-docker-image:
    name: Docker build
    runs-on: ${{ matrix.type == 'arm' && 'ubuntu-arm-24.04-4core' || 'ubuntu-latest' }}
    strategy:
      matrix:
        type:
          - arm
          - x86
    steps:
      - name: Check out repository
        if: ${{ github.event_name != 'schedule' }}
        uses: actions/checkout@v4

      - name: Get Latest Release Tag
        if: ${{ github.event_name == 'schedule' }}
        id: get_latest_release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: latestRelease } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            core.setOutput('tag_name', latestRelease.tag_name);

      - name: Checkout latest release
        if: ${{ github.event_name == 'schedule' }}
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.get_latest_release.outputs.tag_name }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.3
          cache: false

      - name: Login to harbor.onebrief.tools
        uses: docker/login-action@v2
        with:
          registry: harbor.onebrief.tools
          username: ${{ secrets.HARBOR_USER }}
          password: ${{ secrets.HARBOR_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::183613197217:role/GitHubAction-AssumeRoleWithAction-ECR-ReadOnly
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: us-east-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            harbor.onebrief.tools/onebrief/gotenberg
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{version}}
            type=semver,pattern=1.{{major}}.{{minor}}

      - name: Docker Build
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./build/Dockerfile.bc
          build-args: |
            BASE_IMAGE=${{ matrix.type == 'arm' && 'gotenberg/gotenberg' || 'harbor.onebrief.tools/cgr.dev/onebrief.com/gotenberg' }}
            UNOCONVERTER_BIN_PATH=${{ matrix.type == 'arm' && '/usr/bin/unoconverter' || '/usr/bin/unoconv' }}
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=harbor.onebrief.tools/onebrief/gotenberg,push-by-digest=true,name-canonical=true,push=true

      - name: Set outputs
        id: setout
        shell: bash
        env:
          reponame: onebrief/gotenberg-${{ matrix.type }}
        run: |
          echo "image=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> $GITHUB_OUTPUT
          echo "digestname=${reponame/\//-}" >> $GITHUB_OUTPUT

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Export amd64 digest
        if: ${{ matrix.type == 'x86' }}
        run: |
          mkdir -p /tmp/digests
          echo "x86digest=${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ steps.setout.outputs.digestname }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: Merge
    runs-on: ubuntu-latest
    needs:
      - build-docker-image
    steps:
      - name: Check out repository
        if: ${{ github.event_name != 'schedule' }}
        uses: actions/checkout@v4

      - name: Get Latest Release Tag
        if: ${{ github.event_name == 'schedule' }}
        id: get_latest_release
        uses: actions/github-script@v6
        with:
          script: |
            const latestRelease = await github.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            core.setOutput('tag_name', latestRelease.data.tag_name);

      - name: Checkout latest release
        if: ${{ github.event_name == 'schedule' }}
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.get_latest_release.outputs.tag_name }}

      - name: Set outputs
        id: calculate
        shell: bash
        env:
          reponame: onebrief/gotenberg
        run: |
          echo "digestname=${reponame/\//-}" >> $GITHUB_OUTPUT

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-${{ steps.calculate.outputs.digestname }}-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: harbor.onebrief.tools
          username: ${{ secrets.HARBOR_USER }}
          password: ${{ secrets.HARBOR_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: harbor.onebrief.tools/onebrief/gotenberg
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{version}}
            type=semver,pattern=1.{{major}}.{{minor}}0{{patch}}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        shell: bash
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'harbor.onebrief.tools/onebrief/gotenberg@sha256:%s ' *)

      - name: set outputs
        id: outputs
        run: |
          echo "image=harbor.onebrief.tools/onebrief/gotenberg" >> $GITHUB_OUTPUT

  anchore:
    name: Anchore
    continue-on-error: true
    needs:
      - image-prep
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: anchore/scan-action@7e1d7c7efead0a0d601d6db77ef537817e3ca6a8
        id: scan
        with:
          image: harbor.onebrief.tools/onebrief/gotenberg@sha256:${{ steps.build-docker-image.outputs.x86digest }}
          fail-build: false
          cache-db: true
      - name: upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@7e3036b9cd87fc26dd06747b7aa4b96c27aaef3a
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
          matrix: '{ "images": "harbor.onebrief.tools/onebrief/gotenberg@sha256:${{ steps.build-docker-image.outputs.x86digest }}" }'
